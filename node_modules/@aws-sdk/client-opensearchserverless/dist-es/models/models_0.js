import { OpenSearchServerlessServiceException as __BaseException } from "./OpenSearchServerlessServiceException";
export const AccessPolicyType = {
    data: "data",
};
export class ConflictException extends __BaseException {
    name = "ConflictException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ConflictException.prototype);
    }
}
export class InternalServerException extends __BaseException {
    name = "InternalServerException";
    $fault = "server";
    constructor(opts) {
        super({
            name: "InternalServerException",
            $fault: "server",
            ...opts,
        });
        Object.setPrototypeOf(this, InternalServerException.prototype);
    }
}
export class ServiceQuotaExceededException extends __BaseException {
    name = "ServiceQuotaExceededException";
    $fault = "client";
    resourceId;
    resourceType;
    serviceCode;
    quotaCode;
    constructor(opts) {
        super({
            name: "ServiceQuotaExceededException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ServiceQuotaExceededException.prototype);
        this.resourceId = opts.resourceId;
        this.resourceType = opts.resourceType;
        this.serviceCode = opts.serviceCode;
        this.quotaCode = opts.quotaCode;
    }
}
export class ValidationException extends __BaseException {
    name = "ValidationException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ValidationException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ValidationException.prototype);
    }
}
export class ResourceNotFoundException extends __BaseException {
    name = "ResourceNotFoundException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
    }
}
export const StandbyReplicas = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
export const CollectionStatus = {
    ACTIVE: "ACTIVE",
    CREATING: "CREATING",
    DELETING: "DELETING",
    FAILED: "FAILED",
};
export const CollectionType = {
    SEARCH: "SEARCH",
    TIMESERIES: "TIMESERIES",
    VECTORSEARCH: "VECTORSEARCH",
};
export const LifecyclePolicyType = {
    retention: "retention",
};
export const ResourceType = {
    index: "index",
};
export const VpcEndpointStatus = {
    ACTIVE: "ACTIVE",
    DELETING: "DELETING",
    FAILED: "FAILED",
    PENDING: "PENDING",
};
export class OcuLimitExceededException extends __BaseException {
    name = "OcuLimitExceededException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "OcuLimitExceededException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, OcuLimitExceededException.prototype);
    }
}
export const IamIdentityCenterGroupAttribute = {
    GroupId: "GroupId",
    GroupName: "GroupName",
};
export const IamIdentityCenterUserAttribute = {
    Email: "Email",
    UserId: "UserId",
    UserName: "UserName",
};
export const SecurityConfigType = {
    iamfederation: "iamfederation",
    iamidentitycenter: "iamidentitycenter",
    saml: "saml",
};
export const SecurityPolicyType = {
    encryption: "encryption",
    network: "network",
};
