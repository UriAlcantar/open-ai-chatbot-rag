import { loadRestJsonErrorCode, parseJsonBody as parseBody, parseJsonErrorBody as parseErrorBody } from "@aws-sdk/core";
import { HttpRequest as __HttpRequest } from "@smithy/protocol-http";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectLong as __expectLong, expectString as __expectString, take, withBaseException, } from "@smithy/smithy-client";
import { v4 as generateIdempotencyToken } from "uuid";
import { ConflictException, InternalServerException, OcuLimitExceededException, ResourceNotFoundException, ServiceQuotaExceededException, ValidationException, } from "../models/models_0";
import { OpenSearchServerlessServiceException as __BaseException } from "../models/OpenSearchServerlessServiceException";
export const se_BatchGetCollectionCommand = async (input, context) => {
    const headers = sharedHeaders("BatchGetCollection");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_BatchGetEffectiveLifecyclePolicyCommand = async (input, context) => {
    const headers = sharedHeaders("BatchGetEffectiveLifecyclePolicy");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_BatchGetLifecyclePolicyCommand = async (input, context) => {
    const headers = sharedHeaders("BatchGetLifecyclePolicy");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_BatchGetVpcEndpointCommand = async (input, context) => {
    const headers = sharedHeaders("BatchGetVpcEndpoint");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateAccessPolicyCommand = async (input, context) => {
    const headers = sharedHeaders("CreateAccessPolicy");
    let body;
    body = JSON.stringify(se_CreateAccessPolicyRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateCollectionCommand = async (input, context) => {
    const headers = sharedHeaders("CreateCollection");
    let body;
    body = JSON.stringify(se_CreateCollectionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateIndexCommand = async (input, context) => {
    const headers = sharedHeaders("CreateIndex");
    let body;
    body = JSON.stringify(se_CreateIndexRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateLifecyclePolicyCommand = async (input, context) => {
    const headers = sharedHeaders("CreateLifecyclePolicy");
    let body;
    body = JSON.stringify(se_CreateLifecyclePolicyRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateSecurityConfigCommand = async (input, context) => {
    const headers = sharedHeaders("CreateSecurityConfig");
    let body;
    body = JSON.stringify(se_CreateSecurityConfigRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateSecurityPolicyCommand = async (input, context) => {
    const headers = sharedHeaders("CreateSecurityPolicy");
    let body;
    body = JSON.stringify(se_CreateSecurityPolicyRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateVpcEndpointCommand = async (input, context) => {
    const headers = sharedHeaders("CreateVpcEndpoint");
    let body;
    body = JSON.stringify(se_CreateVpcEndpointRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteAccessPolicyCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteAccessPolicy");
    let body;
    body = JSON.stringify(se_DeleteAccessPolicyRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteCollectionCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteCollection");
    let body;
    body = JSON.stringify(se_DeleteCollectionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteIndexCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteIndex");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteLifecyclePolicyCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteLifecyclePolicy");
    let body;
    body = JSON.stringify(se_DeleteLifecyclePolicyRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteSecurityConfigCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteSecurityConfig");
    let body;
    body = JSON.stringify(se_DeleteSecurityConfigRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteSecurityPolicyCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteSecurityPolicy");
    let body;
    body = JSON.stringify(se_DeleteSecurityPolicyRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteVpcEndpointCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteVpcEndpoint");
    let body;
    body = JSON.stringify(se_DeleteVpcEndpointRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetAccessPolicyCommand = async (input, context) => {
    const headers = sharedHeaders("GetAccessPolicy");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetAccountSettingsCommand = async (input, context) => {
    const headers = sharedHeaders("GetAccountSettings");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetIndexCommand = async (input, context) => {
    const headers = sharedHeaders("GetIndex");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetPoliciesStatsCommand = async (input, context) => {
    const headers = sharedHeaders("GetPoliciesStats");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetSecurityConfigCommand = async (input, context) => {
    const headers = sharedHeaders("GetSecurityConfig");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetSecurityPolicyCommand = async (input, context) => {
    const headers = sharedHeaders("GetSecurityPolicy");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListAccessPoliciesCommand = async (input, context) => {
    const headers = sharedHeaders("ListAccessPolicies");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListCollectionsCommand = async (input, context) => {
    const headers = sharedHeaders("ListCollections");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListLifecyclePoliciesCommand = async (input, context) => {
    const headers = sharedHeaders("ListLifecyclePolicies");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListSecurityConfigsCommand = async (input, context) => {
    const headers = sharedHeaders("ListSecurityConfigs");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListSecurityPoliciesCommand = async (input, context) => {
    const headers = sharedHeaders("ListSecurityPolicies");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListTagsForResourceCommand = async (input, context) => {
    const headers = sharedHeaders("ListTagsForResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListVpcEndpointsCommand = async (input, context) => {
    const headers = sharedHeaders("ListVpcEndpoints");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_TagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("TagResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UntagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("UntagResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateAccessPolicyCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateAccessPolicy");
    let body;
    body = JSON.stringify(se_UpdateAccessPolicyRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateAccountSettingsCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateAccountSettings");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateCollectionCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateCollection");
    let body;
    body = JSON.stringify(se_UpdateCollectionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateIndexCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateIndex");
    let body;
    body = JSON.stringify(se_UpdateIndexRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateLifecyclePolicyCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateLifecyclePolicy");
    let body;
    body = JSON.stringify(se_UpdateLifecyclePolicyRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateSecurityConfigCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateSecurityConfig");
    let body;
    body = JSON.stringify(se_UpdateSecurityConfigRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateSecurityPolicyCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateSecurityPolicy");
    let body;
    body = JSON.stringify(se_UpdateSecurityPolicyRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateVpcEndpointCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateVpcEndpoint");
    let body;
    body = JSON.stringify(se_UpdateVpcEndpointRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const de_BatchGetCollectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_BatchGetEffectiveLifecyclePolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_BatchGetLifecyclePolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_BatchGetLifecyclePolicyResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_BatchGetVpcEndpointCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateAccessPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateAccessPolicyResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateCollectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateIndexCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateLifecyclePolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateLifecyclePolicyResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateSecurityConfigCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateSecurityPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateSecurityPolicyResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateVpcEndpointCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteAccessPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteCollectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteIndexCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteLifecyclePolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteSecurityConfigCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteSecurityPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteVpcEndpointCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetAccessPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetAccessPolicyResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetAccountSettingsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetIndexCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetIndexResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetPoliciesStatsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetSecurityConfigCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetSecurityPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetSecurityPolicyResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListAccessPoliciesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListCollectionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListLifecyclePoliciesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListSecurityConfigsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListSecurityPoliciesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListVpcEndpointsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateAccessPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateAccessPolicyResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateAccountSettingsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateCollectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateIndexCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateLifecyclePolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateLifecyclePolicyResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateSecurityConfigCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateSecurityPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateSecurityPolicyResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateVpcEndpointCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.opensearchserverless#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.opensearchserverless#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.opensearchserverless#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ServiceQuotaExceededException":
        case "com.amazonaws.opensearchserverless#ServiceQuotaExceededException":
            throw await de_ServiceQuotaExceededExceptionRes(parsedOutput, context);
        case "OcuLimitExceededException":
        case "com.amazonaws.opensearchserverless#OcuLimitExceededException":
            throw await de_OcuLimitExceededExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.opensearchserverless#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ConflictExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InternalServerExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InternalServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_OcuLimitExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new OcuLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ServiceQuotaExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ServiceQuotaExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ValidationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ValidationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const se_CreateAccessPolicyRequest = (input, context) => {
    return take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        description: [],
        name: [],
        policy: [],
        type: [],
    });
};
const se_CreateCollectionRequest = (input, context) => {
    return take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        description: [],
        name: [],
        standbyReplicas: [],
        tags: _json,
        type: [],
    });
};
const se_CreateIndexRequest = (input, context) => {
    return take(input, {
        id: [],
        indexName: [],
        indexSchema: (_) => se_IndexSchema(_, context),
    });
};
const se_CreateLifecyclePolicyRequest = (input, context) => {
    return take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        description: [],
        name: [],
        policy: [],
        type: [],
    });
};
const se_CreateSecurityConfigRequest = (input, context) => {
    return take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        description: [],
        iamFederationOptions: _json,
        iamIdentityCenterOptions: _json,
        name: [],
        samlOptions: _json,
        type: [],
    });
};
const se_CreateSecurityPolicyRequest = (input, context) => {
    return take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        description: [],
        name: [],
        policy: [],
        type: [],
    });
};
const se_CreateVpcEndpointRequest = (input, context) => {
    return take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        name: [],
        securityGroupIds: _json,
        subnetIds: _json,
        vpcId: [],
    });
};
const se_DeleteAccessPolicyRequest = (input, context) => {
    return take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        name: [],
        type: [],
    });
};
const se_DeleteCollectionRequest = (input, context) => {
    return take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        id: [],
    });
};
const se_DeleteLifecyclePolicyRequest = (input, context) => {
    return take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        name: [],
        type: [],
    });
};
const se_DeleteSecurityConfigRequest = (input, context) => {
    return take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        id: [],
    });
};
const se_DeleteSecurityPolicyRequest = (input, context) => {
    return take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        name: [],
        type: [],
    });
};
const se_DeleteVpcEndpointRequest = (input, context) => {
    return take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        id: [],
    });
};
const se_IndexSchema = (input, context) => {
    return input;
};
const se_UpdateAccessPolicyRequest = (input, context) => {
    return take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        description: [],
        name: [],
        policy: [],
        policyVersion: [],
        type: [],
    });
};
const se_UpdateCollectionRequest = (input, context) => {
    return take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        description: [],
        id: [],
    });
};
const se_UpdateIndexRequest = (input, context) => {
    return take(input, {
        id: [],
        indexName: [],
        indexSchema: (_) => se_IndexSchema(_, context),
    });
};
const se_UpdateLifecyclePolicyRequest = (input, context) => {
    return take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        description: [],
        name: [],
        policy: [],
        policyVersion: [],
        type: [],
    });
};
const se_UpdateSecurityConfigRequest = (input, context) => {
    return take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        configVersion: [],
        description: [],
        iamFederationOptions: _json,
        iamIdentityCenterOptionsUpdates: _json,
        id: [],
        samlOptions: _json,
    });
};
const se_UpdateSecurityPolicyRequest = (input, context) => {
    return take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        description: [],
        name: [],
        policy: [],
        policyVersion: [],
        type: [],
    });
};
const se_UpdateVpcEndpointRequest = (input, context) => {
    return take(input, {
        addSecurityGroupIds: _json,
        addSubnetIds: _json,
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        id: [],
        removeSecurityGroupIds: _json,
        removeSubnetIds: _json,
    });
};
const de_AccessPolicyDetail = (output, context) => {
    return take(output, {
        createdDate: __expectLong,
        description: __expectString,
        lastModifiedDate: __expectLong,
        name: __expectString,
        policy: (_) => de_Document(_, context),
        policyVersion: __expectString,
        type: __expectString,
    });
};
const de_BatchGetLifecyclePolicyResponse = (output, context) => {
    return take(output, {
        lifecyclePolicyDetails: (_) => de_LifecyclePolicyDetails(_, context),
        lifecyclePolicyErrorDetails: _json,
    });
};
const de_CreateAccessPolicyResponse = (output, context) => {
    return take(output, {
        accessPolicyDetail: (_) => de_AccessPolicyDetail(_, context),
    });
};
const de_CreateLifecyclePolicyResponse = (output, context) => {
    return take(output, {
        lifecyclePolicyDetail: (_) => de_LifecyclePolicyDetail(_, context),
    });
};
const de_CreateSecurityPolicyResponse = (output, context) => {
    return take(output, {
        securityPolicyDetail: (_) => de_SecurityPolicyDetail(_, context),
    });
};
const de_GetAccessPolicyResponse = (output, context) => {
    return take(output, {
        accessPolicyDetail: (_) => de_AccessPolicyDetail(_, context),
    });
};
const de_GetIndexResponse = (output, context) => {
    return take(output, {
        indexSchema: (_) => de_IndexSchema(_, context),
    });
};
const de_GetSecurityPolicyResponse = (output, context) => {
    return take(output, {
        securityPolicyDetail: (_) => de_SecurityPolicyDetail(_, context),
    });
};
const de_IndexSchema = (output, context) => {
    return output;
};
const de_LifecyclePolicyDetail = (output, context) => {
    return take(output, {
        createdDate: __expectLong,
        description: __expectString,
        lastModifiedDate: __expectLong,
        name: __expectString,
        policy: (_) => de_Document(_, context),
        policyVersion: __expectString,
        type: __expectString,
    });
};
const de_LifecyclePolicyDetails = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LifecyclePolicyDetail(entry, context);
    });
    return retVal;
};
const de_SecurityPolicyDetail = (output, context) => {
    return take(output, {
        createdDate: __expectLong,
        description: __expectString,
        lastModifiedDate: __expectLong,
        name: __expectString,
        policy: (_) => de_Document(_, context),
        policyVersion: __expectString,
        type: __expectString,
    });
};
const de_UpdateAccessPolicyResponse = (output, context) => {
    return take(output, {
        accessPolicyDetail: (_) => de_AccessPolicyDetail(_, context),
    });
};
const de_UpdateLifecyclePolicyResponse = (output, context) => {
    return take(output, {
        lifecyclePolicyDetail: (_) => de_LifecyclePolicyDetail(_, context),
    });
};
const de_UpdateSecurityPolicyResponse = (output, context) => {
    return take(output, {
        securityPolicyDetail: (_) => de_SecurityPolicyDetail(_, context),
    });
};
const de_Document = (output, context) => {
    return output;
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const throwDefaultError = withBaseException(__BaseException);
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new __HttpRequest(contents);
};
function sharedHeaders(operation) {
    return {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": `OpenSearchServerless.${operation}`,
    };
}
