const { S3Client, ListObjectsV2Command, DeleteObjectCommand, PutObjectCommand } = require('@aws-sdk/client-s3');
const fs = require('fs');
const path = require('path');

const s3Client = new S3Client({ region: 'us-east-2' });

// Documentos de ejemplo para el dataset
const sampleDocuments = {
  'company-policy.txt': `Pol√≠tica de la Empresa

1. Horarios de Trabajo
Los empleados deben trabajar de 9:00 AM a 6:00 PM de lunes a viernes.
Se permite flexibilidad de horario con aprobaci√≥n del supervisor.

2. Vacaciones
Cada empleado tiene derecho a 20 d√≠as de vacaciones por a√±o.
Las vacaciones deben solicitarse con al menos 2 semanas de anticipaci√≥n.

3. Beneficios
- Seguro m√©dico completo
- 401k con matching del 6%
- Bonos anuales basados en rendimiento
- D√≠as de enfermedad ilimitados

4. C√≥digo de Conducta
Los empleados deben mantener un ambiente de trabajo respetuoso y profesional.
No se tolera el acoso o discriminaci√≥n de ning√∫n tipo.`,

  'product-manual.txt': `Manual del Producto XYZ

Descripci√≥n del Producto:
El Producto XYZ es una soluci√≥n integral para gesti√≥n de proyectos que incluye:
- Planificaci√≥n de tareas
- Seguimiento de progreso
- Gesti√≥n de recursos
- Reportes autom√°ticos

Caracter√≠sticas Principales:
1. Dashboard intuitivo con m√©tricas en tiempo real
2. Integraci√≥n con herramientas populares (Slack, Jira, GitHub)
3. Automatizaci√≥n de flujos de trabajo
4. An√°lisis predictivo de riesgos

Precios:
- Plan B√°sico: $29/mes por usuario
- Plan Profesional: $59/mes por usuario
- Plan Enterprise: $99/mes por usuario

Soporte:
- Soporte por email 24/7
- Chat en vivo de 9 AM a 6 PM EST
- Documentaci√≥n completa y videos tutoriales`,

  'faq.txt': `Preguntas Frecuentes

Q: ¬øC√≥mo puedo cambiar mi contrase√±a?
A: Ve a Configuraci√≥n > Seguridad > Cambiar Contrase√±a. Necesitar√°s tu contrase√±a actual.

Q: ¬øPuedo exportar mis datos?
A: S√≠, puedes exportar todos tus datos en formato CSV, JSON o PDF desde la secci√≥n de Exportar.

Q: ¬øHay l√≠mite en el n√∫mero de proyectos?
A: El plan b√°sico permite hasta 10 proyectos, el profesional hasta 50, y el enterprise es ilimitado.

Q: ¬øC√≥mo funciona la facturaci√≥n?
A: La facturaci√≥n es mensual y se procesa autom√°ticamente. Puedes cancelar en cualquier momento.

Q: ¬øOfrecen capacitaci√≥n?
A: S√≠, ofrecemos sesiones de capacitaci√≥n gratuitas para nuevos clientes y webinars mensuales.`,

  'technical-specs.txt': `Especificaciones T√©cnicas

Arquitectura del Sistema:
- Frontend: React.js con TypeScript
- Backend: Node.js con Express
- Base de datos: PostgreSQL
- Cache: Redis
- Almacenamiento: AWS S3
- CDN: CloudFront

Requisitos del Sistema:
- Navegador: Chrome 90+, Firefox 88+, Safari 14+
- Conexi√≥n a internet: M√≠nimo 1 Mbps
- RAM: M√≠nimo 4GB recomendado
- Procesador: Intel i3 o equivalente

APIs Disponibles:
- REST API con documentaci√≥n completa
- Webhooks para integraciones
- SDKs para JavaScript, Python, y Java
- Rate limiting: 1000 requests por minuto

Seguridad:
- Encriptaci√≥n AES-256 en tr√°nsito y reposo
- Autenticaci√≥n OAuth 2.0
- Certificaciones SOC 2 Type II
- Cumplimiento GDPR y CCPA`,

  'ai-guidelines.txt': `Gu√≠as de Inteligencia Artificial

Principios de IA:
1. Transparencia: Los sistemas de IA deben ser explicables
2. Equidad: Evitar sesgos y discriminaci√≥n
3. Privacidad: Proteger datos personales
4. Seguridad: Prevenir da√±os y abusos

Mejores Pr√°cticas:
- Validar datos de entrada
- Monitorear rendimiento continuamente
- Documentar decisiones de dise√±o
- Implementar salvaguardas

Casos de Uso Aprobados:
- An√°lisis de datos no sensibles
- Automatizaci√≥n de tareas repetitivas
- Asistencia en toma de decisiones
- Optimizaci√≥n de procesos

Restricciones:
- No usar para decisiones cr√≠ticas sin supervisi√≥n
- No procesar datos personales sin consentimiento
- No reemplazar completamente la intervenci√≥n humana
- Mantener control humano sobre sistemas aut√≥nomos`
};

async function clearDocuments(bucketName) {
  console.log('üßπ Limpiando documentos existentes...');
  
  try {
    const listCommand = new ListObjectsV2Command({
      Bucket: bucketName,
      Prefix: 'documents/',
    });
    
    const response = await s3Client.send(listCommand);
    const objects = response.Contents || [];
    
    if (objects.length === 0) {
      console.log('üì≠ No hay documentos para limpiar');
      return;
    }
    
    for (const obj of objects) {
      if (obj.Key) {
        const deleteCommand = new DeleteObjectCommand({
          Bucket: bucketName,
          Key: obj.Key,
        });
        await s3Client.send(deleteCommand);
        console.log(`üóëÔ∏è Eliminado: ${obj.Key}`);
      }
    }
    
    console.log(`‚úÖ ${objects.length} documentos eliminados`);
  } catch (error) {
    console.error('‚ùå Error limpiando documentos:', error.message);
  }
}

async function uploadDocuments(bucketName) {
  console.log(`üìÅ Subiendo documentos al bucket: ${bucketName}`);
  
  for (const [filename, content] of Object.entries(sampleDocuments)) {
    try {
      const command = new PutObjectCommand({
        Bucket: bucketName,
        Key: `documents/${filename}`,
        Body: content,
        ContentType: 'text/plain',
      });
      
      await s3Client.send(command);
      console.log(`‚úÖ Subido: ${filename}`);
    } catch (error) {
      console.error(`‚ùå Error subiendo ${filename}:`, error.message);
    }
  }
  
  console.log('üéâ Documentos subidos exitosamente!');
  console.log('üìù Los documentos ser√°n procesados autom√°ticamente por la Lambda de procesamiento.');
}

async function main() {
  const bucketName = process.argv[2];
  
  if (!bucketName) {
    console.error('‚ùå Por favor proporciona el nombre del bucket:');
    console.log('node scripts/refresh-documents.js <nombre-del-bucket>');
    process.exit(1);
  }
  
  console.log('üîÑ Iniciando refresh completo de documentos...\n');
  
  // Paso 1: Limpiar documentos existentes
  await clearDocuments(bucketName);
  
  console.log('');
  
  // Paso 2: Subir documentos nuevos
  await uploadDocuments(bucketName);
  
  console.log('\n‚ú® Refresh completado!');
}

main().catch(console.error);
